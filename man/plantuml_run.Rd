% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plantuml_run.R
\name{plantuml_run}
\alias{plantuml_run}
\title{Run the plantuml binary}
\usage{
plantuml_run(
  x = NULL,
  file = "",
  plantuml_jar = getPlantumlOption("jar_name"),
  plantuml_opt = getPlantumlOption("plantuml_opt"),
  java_bin = getPlantumlOption("java_bin"),
  java_opt = getPlantumlOption("java_opt"),
  wait = FALSE
)
}
\arguments{
\item{x}{plantuml code to draw the UML graph}

\item{file}{file name, including extension, to which the generated plantUML graph
should be saved. The extension determines the format of the graph.
If \verb{NULL', the graph is returned as a ASCII art, i.e. a }character` vector..}

\item{plantuml_jar}{path and name of the plantuml jar file. The dafault is read from
\code{getPlantumlOption("plantuml_jar")}.}

\item{plantuml_opt}{options for the call of \code{java}. The default is
read from \code{getPlantumlOption("plantuml_opt")}.}

\item{java_bin}{path to the \code{java} binary. The dafault is read from
\code{getPlantumlOption("java_bin")}.}

\item{java_opt}{options for the call of \code{java}. The default is
read from \code{getPlantumlOption("java_opt")}.}

\item{wait}{if \code{TRUE}, wait until the process has finished. If \code{FALSE}, return immediately.}
}
\value{
if wait  is \code{TRUE} the pid of the process started. Otherwise the result from the call to \code{system2()}
}
\description{
The in the package installation included \code{plantuml} binary is executed using
the provided java and plantuml commands. This is effectively a wrapper around
\code{system2()} with some values set to run \code{plantuml}.
}
\examples{
\dontrun{
# This will take some time when you run it
# for the first time as it will download \code{plantuml.jar}
  plantuml_run()
}
}
